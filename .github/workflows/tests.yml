name: Tests

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      NODE_OPTIONS: --experimental-vm-modules --experimental-specifier-resolution=node
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      FORCE_COLOR: true

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Debug environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Package.json contents:"
          cat package.json

      - name: Install dependencies
        run: |
          npm config list
          npm ci
        shell: bash

      - name: Run tests
        id: test
        run: |
          echo "Current working directory: $(pwd)"
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found in $(pwd)"
            ls -la
            exit 1
          fi

          echo "package.json contents:"
          cat package.json

          echo "Checking test script..."
          if ! npm run test --dry-run; then
            echo "Error: 'test' script not found in package.json"
            exit 1
          fi

          echo "Running tests..."
          npm run test
        shell: bash

      - name: Generate test summary
        if: always()
        run: |
          if [[ "${{ steps.test.outcome }}" == "success" ]]; then
            echo "### ✅ Tests Passed Successfully" >> $GITHUB_STEP_SUMMARY
            
            if [ -f coverage/coverage-summary.json ]; then
              echo "#### Coverage Summary" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ Tests Failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the test output above for details on failing tests." >> $GITHUB_STEP_SUMMARY
          fi
