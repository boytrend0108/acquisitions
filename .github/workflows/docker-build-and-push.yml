name: Docker Build and Push

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/acquisitions
          tags: |
            type=ref,event=branch
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=prod-{{date 'YYYYMMDD-HHmmss'}}

      - name: Ensure env files for build
        run: |
          set -euo pipefail
          mkdir -p acquisitions
          # If acquisitions/env.example exists, use it as the source for env files
          if [ -f acquisitions/env.example ]; then
            cp acquisitions/env.example acquisitions/.env.production || true
            cp acquisitions/env.example acquisitions/.env.development || true
          else
            # Fallback: create minimal env files so Dockerfile copy doesn't fail
            printf "NODE_ENV=production\n" > acquisitions/.env.production
            printf "NODE_ENV=development\n" > acquisitions/.env.development
          fi

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          # Use root directory as context and root Dockerfile
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/acquisitions:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/acquisitions:buildcache,mode=max
          # Ensure the Dockerfile sees NODE_ENV=production so it copies .env.production (we created it above)
          build-args: |
            NODE_ENV=production

      - name: Generate build summary
        run: |
          echo "### 🐳 Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "#### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "Repository: \`${{ secrets.DOCKER_USERNAME }}/acquisitions\`" >> $GITHUB_STEP_SUMMARY
          echo "Tags:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
